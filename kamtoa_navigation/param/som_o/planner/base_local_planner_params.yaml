TrajectoryPlannerROS:

  acc_lim_x: 1.0                # m/s^2
  acc_lim_y: 0                  # m/s^2
  acc_lim_theta: 2.0            # rad/s^2

  max_vel_x: 0.3                # m/s
  min_vel_x: 0.05               # m/s
  #y_vels: [-1.0, -0.1, 0.1, 1.0]

  max_vel_theta: 1.0            # rad/s
  min_vel_theta: -1.0           # rad/s
  min_in_place_vel_theta: 0.3   # rad/s

  #backup_vel: -0.1             # m/s deprecated
  escape_vel: -0.1              # m/s

  # Omnidirectional drive systems (or holonomic drives)
  # holonomic enable moving in any direction, independent of rotation.
  holonomic_robot: false

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.3      # rad
  xy_goal_tolerance: 0.15      # m
  latch_xy_goal_tolerance: false


  # Forward Simulation Parameters 
  
  sim_time: 3.0           # The amount of time to forward-simulate trajectories in seconds
  sim_granularity: 0.025  # The step size, in meters, to take between points on a given trajectory
  angular_sim_granularity: 0.025 # The step size, in radians, to take between angular samples on a given trajectory
  vx_samples: 6           # The number of samples to use when exploring the x velocity space
  vy_samples: 1
  vtheta_samples: 20      # The number of samples to use when exploring the theta velocity space

  # Trajectory Scoring Parameters
  # cost = 
  #  pdist_scale * (distance to path from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter) 
  # + gdist_scale * (distance to local goal from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter) 
  # + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))
  meter_scoring: true     # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default. 
  pdist_scale: 0.4        # The weighting for how much the controller should stay close to the path it was given 
  gdist_scale: 0.8        # The weighting for how much the controller should attempt to reach its local goal, also controls speed 
  occdist_scale: 0.01     # The weighting for how much the controller should attempt to avoid obstacles 
  heading_lookahead: 0.325 # How far to look ahead in meters when scoring different in-place-rotation trajectories 
  heading_scoring: true   # Whether to score based on the robot's heading to the path or its distance from the path 
  heading_scoring_timestep: 0.8 # How far to look ahead in time in seconds along the simulated trajectory when using heading scoring 
  dwa: true # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout (NOTE: In our experience DWA worked as well as Trajectory Rollout and is computationally less expensive

  global_frame_id: odom 

  # Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05
  

 


